---
import { db } from '../lib/supabase';
import { parseEventTimesUTC } from '../lib/calendar-utils';
import { getCategoryBadgeVariant } from '../lib/event-utils';
import { format } from 'date-fns';
import { tz } from '@date-fns/tz';

// Fetch all approved events
const { data: allEvents, error: allEventsError } = await db.events.getCurrentAndFuture();
if (allEventsError) {
  console.error('Error fetching events:', allEventsError);
}

// Transform events for FullCalendar with UTC timezone handling
const calendarEvents = (allEvents || []).map((event) => {
  try {
    // Parse event times with UTC timezone handling
    const { startDate, endDate } = parseEventTimesUTC(event);
    
    return {
      id: event.id,
      title: event.title || 'Untitled Event',
      start: format(startDate, "yyyy-MM-dd'T'HH:mm:ss", { in: tz('America/Los_Angeles') }),
      end: endDate ? format(endDate, "yyyy-MM-dd'T'HH:mm:ss", { in: tz('America/Los_Angeles') }) : null,
      url: `/events/${event.id}`,
      allDay: !event.start_time,
      extendedProps: {
        description: event.description,
        locationName: event.location?.name || '',
        organizationName: '',
        primaryTag: event.primary_tag?.name || '',
        secondaryTag: event.secondary_tag?.name || '',
        organizationId: event.organization_id,
        locationId: event.location_id,
        bgClass: getCategoryBadgeVariant(event.primary_tag?.name || ''),
      },
    };
  } catch (error) {
    console.warn(`Error processing event ${event.id}:`, error);
    return null;
  }
}).filter(Boolean); // Remove any null events
---

<div id="calendar" data-events={JSON.stringify(calendarEvents)}></div>
<script is:inline src="https://unpkg.com/fullcalendar@6.1.11/index.global.min.js"></script>
<script is:inline src="/fullcalendar-init.js"></script> 