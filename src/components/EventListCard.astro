---
import Badge from './ui/Badge.astro';
import { formatEventDate, formatTime, isToday, getEventUrl } from '../lib/event-utils';

const { event, tags, className = '' } = Astro.props;

const { month: eventMonth, day: eventDay, dayOfWeek: eventDayOfWeek } = formatEventDate(event.start_date);
const eventIsToday = isToday(event.start_date);
---

<article class={`event-list-card relative flex h-full transition-colors ${className}`}>
  <a
    href={getEventUrl(event.id)}
    class="absolute inset-0 z-10"
    aria-label={`View details for ${event.title}`}></a>

  <div class="flex-none text-center p-4 w-24">
    <p class="text-lg font-bold opacity-80">{eventMonth}</p>
    <p class="text-5xl font-extrabold leading-tight">{eventDay}</p>
  </div>

  <div class="relative flex-grow p-4 pr-10">
    <!-- Star for featured events -->
    {
      event.featured && (
        <div class="absolute top-4 right-4 z-20">
          <svg class="w-5 h-5 text-yellow-400 fill-current" viewBox="0 0 20 20">
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
          </svg>
        </div>
      )
    }

    <!-- Main content -->
    <div class="relative z-0">
      {
        eventIsToday && (
          <Badge variant="today" size="sm" className="mb-2">Today</Badge>
        )
      }
      <h3 class="text-xl font-bold mb-1 line-clamp-2">{event.title}</h3>
      <p class="text-sm opacity-90 mb-2">
        <span class="font-semibold">{eventDayOfWeek}</span>
        {event.start_time ? ` Â· ${formatTime(event.start_time)}` : ''}
        {event.end_time ? ` - ${formatTime(event.end_time)}` : ''}
      </p>
      {event.description && <p class="text-sm opacity-70 line-clamp-3">{event.description}</p>}

      <!-- Tags -->
      <div class="flex flex-wrap gap-2 mt-3">
        {
          tags && tags.primary && (
            <Badge variant="white" size="sm">{tags.primary}</Badge>
          )
        }
        {
          tags && tags.secondary && (
            <Badge variant="white" size="sm">{tags.secondary}</Badge>
          )
        }
      </div>
    </div>
  </div>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
