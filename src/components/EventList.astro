---
import EventCard from './EventCard.astro';
import type { Tables } from '../lib/supabase';

export interface Props {
  events: Tables<'events'>[];
  showFilters?: boolean;
  showPagination?: boolean;
  itemsPerPage?: number;
  className?: string;
}

const {
  events,
  showFilters = true,
  showPagination = true,
  itemsPerPage = 12,
  className = '',
} = Astro.props;

// Calculate pagination
const totalPages = Math.ceil(events.length / itemsPerPage);
const currentPage = 1; // This would come from URL params in a real implementation
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedEvents = events.slice(startIndex, endIndex);
---

<div class={`space-y-6 ${className}`}>
  {showFilters && (
    <div class="bg-white p-4 rounded-lg shadow-sm border">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <!-- Search -->
        <div>
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input
            type="text"
            id="search"
            name="search"
            placeholder="Search events..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <!-- Date Range -->
        <div>
          <label for="start-date" class="block text-sm font-medium text-gray-700 mb-1">From Date</label>
          <input
            type="date"
            id="start-date"
            name="start-date"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label for="end-date" class="block text-sm font-medium text-gray-700 mb-1">To Date</label>
          <input
            type="date"
            id="end-date"
            name="end-date"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <!-- Filter Button -->
        <div class="flex items-end">
          <button
            type="button"
            class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
          >
            Filter Events
          </button>
        </div>
      </div>
    </div>
  )}
  
  <!-- Results Count -->
  <div class="flex justify-between items-center">
    <p class="text-sm text-gray-600">
      Showing {paginatedEvents.length} of {events.length} events
    </p>
    
    <!-- Sort Options -->
    <div class="flex items-center space-x-2">
      <label for="sort" class="text-sm text-gray-600">Sort by:</label>
      <select
        id="sort"
        name="sort"
        class="text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        <option value="date">Date</option>
        <option value="title">Title</option>
        <option value="featured">Featured</option>
      </select>
    </div>
  </div>
  
  <!-- Events Grid -->
  {paginatedEvents.length > 0 ? (
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {paginatedEvents.map((event) => (
        <EventCard event={event} />
      ))}
    </div>
  ) : (
    <div class="text-center py-12">
      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900">No events found</h3>
      <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
    </div>
  )}
  
  <!-- Pagination -->
  {showPagination && totalPages > 1 && (
    <div class="flex justify-center">
      <nav class="flex items-center space-x-2">
        <button
          class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={currentPage === 1}
        >
          Previous
        </button>
        
        {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
          <button
            class={`px-3 py-2 text-sm font-medium rounded-md ${
              page === currentPage
                ? 'bg-blue-600 text-white'
                : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-50'
            }`}
          >
            {page}
          </button>
        ))}
        
        <button
          class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={currentPage === totalPages}
        >
          Next
        </button>
      </nav>
    </div>
  )}
</div>

<script>
  // Client-side filtering and pagination logic would go here
  // For now, this is a static component that can be enhanced later
</script> 