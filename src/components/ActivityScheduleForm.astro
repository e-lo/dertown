---
import type { Database } from '../types/database';

type KidActivity = Database['public']['Views']['public_kid_activities']['Row'];
type ActivitySchedule = Database['public']['Tables']['activity_schedule']['Row'];

interface Props {
  activity: KidActivity;
}

const { activity } = Astro.props;
---

<div class="activity-schedule-form">
  <h3 class="text-lg font-semibold mb-4">Schedules for {activity.name}</h3>

  <form id="scheduleForm" class="space-y-4">
    <input type="hidden" name="activity_id" value={activity.id} />
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <label for="scheduleName" class="block text-sm font-medium text-gray-700 mb-1">Schedule Name</label>
        <input 
          type="text" 
          id="scheduleName" 
          name="name" 
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="e.g., Monday 3-4pm, Tuesday 5-6pm"
        />
      </div>
      
      <div>
        <label for="maxCapacity" class="block text-sm font-medium text-gray-700 mb-1">Max Capacity</label>
        <input 
          type="number" 
          id="maxCapacity" 
          name="max_capacity" 
          min="1"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Optional"
        />
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <label for="startTime" class="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
        <input 
          type="time" 
          id="startTime" 
          name="start_time" 
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      
      <div>
        <label for="endTime" class="block text-sm font-medium text-gray-700 mb-1">End Time</label>
        <input 
          type="time" 
          id="endTime" 
          name="end_time" 
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </div>

    <div class="flex items-center">
      <input 
        type="checkbox" 
        id="waitlistAvailable" 
        name="waitlist_available" 
        class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
      />
      <label for="waitlistAvailable" class="ml-2 block text-sm text-gray-900">
        Waitlist available
      </label>
    </div>

    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
      Add Schedule
    </button>
  </form>

  <div id="schedulesList" class="mt-6">
    <h4 class="text-md font-medium mb-3">Existing Schedules</h4>
    <div id="schedulesContainer" class="space-y-2">
      <!-- Schedules will be loaded here -->
    </div>
  </div>

  <script>
    const activityId = (document.querySelector('input[name="activity_id"]') as HTMLInputElement)?.value;

    async function loadSchedules() {
      try {
        const response = await fetch(`/api/admin/kid-activities/${activityId}/schedules`);
        if (!response.ok) throw new Error('Failed to load schedules');
        
        const schedules = await response.json();
        const container = document.getElementById('schedulesContainer');
        if (!container) return;

        if (schedules.length === 0) {
          container.innerHTML = '<p class="text-gray-500">No schedules found</p>';
          return;
        }

        container.innerHTML = schedules.map((schedule: any) => `
          <div class="bg-gray-50 p-3 rounded-md flex justify-between items-center">
            <div>
              <strong>${schedule.name}</strong>
              <br>
              <span class="text-sm text-gray-600">
                ${schedule.start_time} - ${schedule.end_time}
                ${schedule.max_capacity ? ` | Max: ${schedule.max_capacity}` : ''}
                ${schedule.waitlist_available ? ' | Waitlist available' : ''}
              </span>
            </div>
            <button 
              onclick="deleteSchedule('${schedule.schedule_id}')"
              class="text-red-600 hover:text-red-800 text-sm"
            >
              Delete
            </button>
          </div>
        `).join('');
      } catch (error) {
        console.error('Error loading schedules:', error);
        const container = document.getElementById('schedulesContainer');
        if (container) {
          container.innerHTML = '<p class="text-red-500">Error loading schedules</p>';
        }
      }
    }

    document.getElementById('scheduleForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target as HTMLFormElement);
      const data = {
        name: formData.get('name') as string,
        start_time: formData.get('start_time') as string,
        end_time: formData.get('end_time') as string,
        max_capacity: formData.get('max_capacity') ? parseInt(formData.get('max_capacity') as string) : null,
        waitlist_available: formData.has('waitlist_available')
      };

      try {
        const response = await fetch(`/api/admin/kid-activities/${activityId}/schedules`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });

        if (!response.ok) throw new Error('Failed to create schedule');
        
        // Reset form and reload schedules
        (e.target as HTMLFormElement).reset();
        loadSchedules();
      } catch (error) {
        console.error('Error creating schedule:', error);
        alert('Error creating schedule');
      }
    });

    async function deleteSchedule(scheduleId: string) {
      if (!confirm('Are you sure you want to delete this schedule?')) return;
      
      try {
        const response = await fetch(`/api/admin/kid-activities/${activityId}/schedules/${scheduleId}`, {
          method: 'DELETE'
        });

        if (!response.ok) throw new Error('Failed to delete schedule');
        
        loadSchedules();
      } catch (error) {
        console.error('Error deleting schedule:', error);
        alert('Error deleting schedule');
      }
    }

    loadSchedules();
  </script>
</div> 