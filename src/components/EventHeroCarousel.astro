---
import EventCarouselCard from './EventCarouselCard.astro';
import { filterFutureEvents } from '../lib/event-utils';
const { events = [], count = 8 } = Astro.props;

// Helper: Sprinkle featured events among upcoming events
function sprinkleFeatured(upcoming: any[], featured: any[]): any[] {
  const result = [];
  const usedIds = new Set();
  let fIdx = 0;
  let uIdx = 0;
  
  // Keep adding events until we reach the count or run out of events
  while (result.length < count && (fIdx < featured.length || uIdx < upcoming.length)) {
    // Add featured event if available and not already used
    if (fIdx < featured.length && !usedIds.has(featured[fIdx].id)) {
      result.push(featured[fIdx]);
      usedIds.add(featured[fIdx].id);
      fIdx++;
    }
    // Add upcoming event if available and not already used
    else if (uIdx < upcoming.length && !usedIds.has(upcoming[uIdx].id)) {
      result.push(upcoming[uIdx]);
      usedIds.add(upcoming[uIdx].id);
      uIdx++;
    }
    // If we can't add either, break to avoid infinite loop
    else {
      break;
    }
  }
  
  return result.slice(0, count);
}

// Filter to only future events
const futureEvents = filterFutureEvents(events as any[]);
const upcoming = (futureEvents as any[]).filter((e: any) => !e.featured);
const featured = (futureEvents as any[]).filter((e: any) => e.featured);
const displayEvents = sprinkleFeatured(upcoming, featured);
const hasEvents = displayEvents.length > 0;
---

{hasEvents && (
  <div class="embla relative">
    <div class="embla__container">
      {displayEvents.map((event, index) => (
        <div class="embla__slide flex-shrink-0" style="width:320px; min-width:320px; max-width:320px; margin: 0 4px;">
          <EventCarouselCard event={event} tags={{ primary: event.primary_tag?.name, secondary: event.secondary_tag?.name }} />
        </div>
      ))}
    </div>
    <button aria-label="Previous" id="embla-prev" class="hidden md:flex bg-white hover:bg-gray-50 rounded-full w-10 h-10 items-center justify-center absolute left-2 top-1/2 -translate-y-1/2 z-10 shadow-lg border border-gray-200">
      <span class="material-symbols-outlined text-2xl">chevron_left</span>
    </button>
    <button aria-label="Next" id="embla-next" class="hidden md:flex bg-white hover:bg-gray-50 rounded-full w-10 h-10 items-center justify-center absolute right-2 top-1/2 -translate-y-1/2 z-10 shadow-lg border border-gray-200">
      <span class="material-symbols-outlined text-2xl">chevron_right</span>
    </button>
    <script type="module" src="/embla-init.js"></script>
  </div>
)}

{!hasEvents && (
    <div class="flex items-center justify-center h-96 bg-gray-100 rounded-lg">
      <div class="text-center">
        <p class="text-gray-500 text-lg">No events to display</p>
        <a href="/submit" class="text-blue-600 hover:text-blue-800 font-medium mt-2 inline-block">
          Submit the first event â†’
        </a>
      </div>
    </div>
)}

<style is:global>
.embla {
  position: relative;
  width: 100%;
  margin: 0 auto;
  margin-top: 20px;
  padding: 0 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow-x: hidden;
}
.embla__container {
  display: flex;
  flex-wrap: nowrap;
  max-width: 100%;
  min-width: 0;
}
.embla__slide {
  flex: 0 0 320px;
  min-width: 320px;
  max-width: 320px;
  margin: 0 4px;
  cursor: grab;
}
</style>

<style>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style> 