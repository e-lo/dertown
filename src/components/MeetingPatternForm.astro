---
import type { Database } from '../types/database';

type KidActivity = Database['public']['Views']['public_kid_activities']['Row'];

interface Props {
  activity: KidActivity;
  showExisting?: boolean;
}

const { activity, showExisting = true } = Astro.props;
---

<div class="meeting-pattern-form">
  <h3 class="text-lg font-semibold mb-4">Meeting Patterns for {activity.name}</h3>
  
  <form id="meetingPatternForm" class="space-y-4">
    <input type="hidden" name="activity_id" value={activity.id} />
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <label for="start_time" class="block text-sm font-medium text-gray-700 mb-1">
          Start Time
        </label>
        <input
          type="time"
          id="start_time"
          name="start_time"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      
      <div>
        <label for="end_time" class="block text-sm font-medium text-gray-700 mb-1">
          End Time
        </label>
        <input
          type="time"
          id="end_time"
          name="end_time"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div>
        <label for="freq" class="block text-sm font-medium text-gray-700 mb-1">
          Frequency
        </label>
        <select
          id="freq"
          name="freq"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="WEEKLY">Weekly</option>
          <option value="DAILY">Daily</option>
          <option value="MONTHLY">Monthly</option>
        </select>
      </div>
      
      <div>
        <label for="interval" class="block text-sm font-medium text-gray-700 mb-1">
          Interval
        </label>
        <input
          type="number"
          id="interval"
          name="interval"
          min="1"
          value="1"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      
      <div>
        <label for="until" class="block text-sm font-medium text-gray-700 mb-1">
          Until Date (Optional)
        </label>
        <input
          type="date"
          id="until"
          name="until"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </div>
    
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Meeting Days
      </label>
      <div class="grid grid-cols-7 gap-2">
        <label class="flex items-center">
          <input type="checkbox" name="weekdays" value="MO" class="mr-2" />
          <span class="text-sm">Mon</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="weekdays" value="TU" class="mr-2" />
          <span class="text-sm">Tue</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="weekdays" value="WE" class="mr-2" />
          <span class="text-sm">Wed</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="weekdays" value="TH" class="mr-2" />
          <span class="text-sm">Thu</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="weekdays" value="FR" class="mr-2" />
          <span class="text-sm">Fri</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="weekdays" value="SA" class="mr-2" />
          <span class="text-sm">Sat</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" name="weekdays" value="SU" class="mr-2" />
          <span class="text-sm">Sun</span>
        </label>
      </div>
    </div>
    
    <div class="flex justify-end space-x-3">
      <button
        type="submit"
        class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        Create Pattern
      </button>
    </div>
  </form>
  
  {showExisting && (
    <div id="patternsList" class="mt-6">
      <h4 class="text-md font-medium mb-3">Existing Patterns</h4>
      <div id="patternsContainer" class="space-y-2">
        <!-- Patterns will be loaded here -->
      </div>
    </div>
  )}
</div>

<script>
  const activityId = (document.querySelector('input[name="activity_id"]') as HTMLInputElement)?.value;
  const showExisting = true; // This will be set by the component props
  
  // Load existing patterns
  async function loadPatterns() {
    if (!activityId) return;
    
    try {
      const response = await fetch(`/api/kid-activities/${activityId}/meeting-patterns`);
      const patterns = await response.json();
      
      const container = document.getElementById('patternsContainer');
      if (!container) return;
      
      container.innerHTML = patterns.length === 0 
        ? '<p class="text-gray-500">No patterns found</p>'
        : patterns.map((pattern: any) => `
            <div class="bg-gray-50 p-3 rounded border">
              <div class="flex justify-between items-start">
                <div>
                  <p class="font-medium">${pattern.start_time} - ${pattern.end_time}</p>
                  <p class="text-sm text-gray-600">
                    ${pattern.freq} (${pattern.meeting_day.map((d: any) => d.weekday).join(', ')})
                  </p>
                  ${pattern.until ? `<p class="text-sm text-gray-500">Until: ${pattern.until}</p>` : ''}
                </div>
                <button 
                  onclick="deletePattern('${pattern.pattern_id}')"
                  class="text-red-600 hover:text-red-800 text-sm"
                >
                  Delete
                </button>
              </div>
            </div>
          `).join('');
    } catch (error) {
      console.error('Error loading patterns:', error);
    }
  }
  
  // Handle form submission
  document.getElementById('meetingPatternForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const weekdays = Array.from(formData.getAll('weekdays'));
    
    if (weekdays.length === 0) {
      alert('Please select at least one meeting day');
      return;
    }
    
    const data = {
      start_time: formData.get('start_time'),
      end_time: formData.get('end_time'),
      freq: formData.get('freq'),
      interval: parseInt(formData.get('interval') as string),
      until: formData.get('until') || null,
      weekdays
    };
    
    try {
      const response = await fetch(`/api/kid-activities/${activityId}/meeting-patterns`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        (e.target as HTMLFormElement).reset();
        loadPatterns();
        alert('Pattern created successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error creating pattern:', error);
      alert('Error creating pattern');
    }
  });
  
  // Delete pattern
  async function deletePattern(patternId: string) {
    if (!confirm('Are you sure you want to delete this pattern?')) return;
    
    try {
      const response = await fetch(`/api/kid-activities/${activityId}/meeting-patterns/${patternId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        loadPatterns();
        alert('Pattern deleted successfully!');
      } else {
        alert('Error deleting pattern');
      }
    } catch (error) {
      console.error('Error deleting pattern:', error);
      alert('Error deleting pattern');
    }
  }
  
  // Load patterns on page load
  loadPatterns();
</script> 