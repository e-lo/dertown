---
import type { Tables } from '../lib/supabase';

export interface Props {
  events: Tables<'events'>[];
  initialView?: 'dayGridMonth' | 'timeGridWeek' | 'timeGridDay' | 'listWeek';
  height?: string;
  className?: string;
}

const {
  events,
  initialView = 'dayGridMonth',
  height = '600px',
  className = '',
} = Astro.props;

// Convert events to FullCalendar format
const calendarEvents = events.map(event => ({
  id: event.id,
  title: event.title,
  start: event.start_time ? `${event.start_date}T${event.start_time}` : event.start_date,
  end: event.end_time ? `${event.end_date}T${event.end_time}` : event.end_date,
  description: event.description,
  url: `/events/${event.id}`,
  backgroundColor: event.featured ? '#fbbf24' : '#3b82f6',
  borderColor: event.featured ? '#f59e0b' : '#2563eb',
  textColor: '#ffffff',
  extendedProps: {
    location: event.location_id,
    organization: event.organization_id,
    cost: event.cost,
    registration: event.registration,
    featured: event.featured,
  }
}));
---

<div class={`bg-white rounded-lg shadow-sm border ${className}`}>
  <!-- Calendar Header -->
  <div class="p-4 border-b border-gray-200">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
      <h2 class="text-lg font-semibold text-gray-900">Event Calendar</h2>
      
      <!-- View Controls -->
      <div class="flex items-center space-x-2">
        <label for="calendar-view" class="text-sm text-gray-600">View:</label>
        <select
          id="calendar-view"
          class="text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="dayGridMonth">Month</option>
          <option value="timeGridWeek">Week</option>
          <option value="timeGridDay">Day</option>
          <option value="listWeek">List</option>
        </select>
        
        <!-- Today Button -->
        <button
          id="calendar-today"
          class="px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
        >
          Today
        </button>
      </div>
    </div>
  </div>
  
  <!-- Calendar Container -->
  <div class="p-4">
    <div id="calendar" style={`height: ${height}`}></div>
  </div>
</div>

<script>
  import { Calendar } from '@fullcalendar/core';
  import dayGridPlugin from '@fullcalendar/daygrid';
  import timeGridPlugin from '@fullcalendar/timegrid';
  import listPlugin from '@fullcalendar/list';
  import interactionPlugin from '@fullcalendar/interaction';

  // Calendar events data
  const calendarEvents = JSON.parse(document.querySelector('#calendar')?.getAttribute('data-events') || '[]');
  
  // Initialize FullCalendar
  const calendarEl = document.getElementById('calendar');
  if (calendarEl) {
    const calendar = new Calendar(calendarEl, {
      plugins: [dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin],
      initialView: 'dayGridMonth',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'
      },
      events: calendarEvents,
      height: 'auto',
      aspectRatio: 1.35,
      eventClick: function(info) {
        if (info.event.url) {
          window.location.href = info.event.url;
          info.jsEvent.preventDefault();
        }
      },
      eventDidMount: function(info) {
        // Add tooltip with event details
        const tooltip = new Tooltip(info.el, {
          title: `
            <strong>${info.event.title}</strong><br>
            ${info.event.start ? new Date(info.event.start).toLocaleDateString() : ''}<br>
            ${info.event.extendedProps.description || ''}
          `,
          placement: 'top',
          trigger: 'hover',
          container: 'body'
        });
      },
      eventTimeFormat: {
        hour: 'numeric',
        minute: '2-digit',
        meridiem: 'short'
      },
      buttonText: {
        today: 'Today',
        month: 'Month',
        week: 'Week',
        day: 'Day',
        list: 'List'
      },
      dayHeaderFormat: { weekday: 'short' },
      titleFormat: { 
        year: 'numeric', 
        month: 'long' 
      },
      firstDay: 0, // Sunday
      weekends: true,
      editable: true,
      selectable: false,
      selectMirror: true,
      moreLinkClick: 'popover',
      eventDisplay: 'block',
      eventColor: '#3b82f6',
      eventTextColor: '#ffffff',
      eventBorderColor: '#2563eb',
      nowIndicator: true,
      scrollTime: '08:00:00',
      slotMinTime: '06:00:00',
      slotMaxTime: '22:00:00',
      allDaySlot: true,
      allDayText: 'All Day',
      slotDuration: '00:30:00',
      slotLabelFormat: {
        hour: 'numeric',
        minute: '2-digit',
        meridiem: 'short'
      }
    });

    calendar.render();

    // Handle view changes
    const viewSelect = document.getElementById('calendar-view') as HTMLSelectElement;
    if (viewSelect) {
      viewSelect.addEventListener('change', function() {
        calendar.changeView(this.value);
      });
    }

    // Handle today button
    const todayBtn = document.getElementById('calendar-today');
    if (todayBtn) {
      todayBtn.addEventListener('click', function() {
        calendar.today();
      });
    }

    // Set initial view
    const initialView = 'dayGridMonth';
    if (viewSelect) {
      viewSelect.value = initialView;
    }
  }

  // Simple tooltip implementation
  class Tooltip {
    constructor(element: HTMLElement, options: any) {
      this.element = element;
      this.options = options;
      this.init();
    }

    private element: HTMLElement;
    private options: any;
    private tooltip: HTMLElement | null = null;

    private init() {
      this.element.addEventListener('mouseenter', () => this.show());
      this.element.addEventListener('mouseleave', () => this.hide());
    }

    private show() {
      this.tooltip = document.createElement('div');
      this.tooltip.className = 'tooltip';
      this.tooltip.innerHTML = this.options.title;
      this.tooltip.style.cssText = `
        position: absolute;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 8px 12px;
        border-radius: 4px;
        font-size: 12px;
        z-index: 1000;
        max-width: 200px;
        word-wrap: break-word;
      `;
      
      document.body.appendChild(this.tooltip);
      this.position();
    }

    private hide() {
      if (this.tooltip) {
        document.body.removeChild(this.tooltip);
        this.tooltip = null;
      }
    }

    private position() {
      if (!this.tooltip) return;
      
      const rect = this.element.getBoundingClientRect();
      this.tooltip.style.left = rect.left + (rect.width / 2) - (this.tooltip.offsetWidth / 2) + 'px';
      this.tooltip.style.top = rect.top - this.tooltip.offsetHeight - 8 + 'px';
    }
  }
</script>

<style>
  .fc {
    font-family: inherit;
  }
  
  .fc-toolbar-title {
    font-size: 1.25rem !important;
    font-weight: 600 !important;
  }
  
  .fc-button {
    background-color: #3b82f6 !important;
    border-color: #2563eb !important;
    font-weight: 500 !important;
  }
  
  .fc-button:hover {
    background-color: #2563eb !important;
    border-color: #1d4ed8 !important;
  }
  
  .fc-button:focus {
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5) !important;
  }
  
  .fc-button-active {
    background-color: #1d4ed8 !important;
    border-color: #1e40af !important;
  }
  
  .fc-event {
    cursor: pointer;
    border-radius: 4px;
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .fc-event:hover {
    opacity: 0.9;
  }
  
  .fc-daygrid-event {
    white-space: nowrap;
    border-radius: 4px;
  }
  
  .fc-list-event {
    border-radius: 4px;
    margin-bottom: 2px;
  }
  
  .fc-list-event:hover {
    background-color: rgba(59, 130, 246, 0.1) !important;
  }
  
  .fc-day-today {
    background-color: rgba(59, 130, 246, 0.05) !important;
  }
  
  .fc-highlight {
    background-color: rgba(59, 130, 246, 0.2) !important;
  }
</style> 