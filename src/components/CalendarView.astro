---
import type { Tables } from '../lib/supabase';

export interface Props {
  events: Tables<'events'>[];
  height?: string;
  className?: string;
}

const {
  events = [],
  height = '600px',
  className = '',
} = Astro.props;

// Convert events to FullCalendar format
const calendarEvents = events.map(event => ({
  id: event.id,
  title: event.title,
  start: event.start_time 
    ? `${event.start_date}T${event.start_time}` 
    : event.start_date,
  end: event.end_date && event.end_time 
    ? `${event.end_date}T${event.end_time}` 
    : event.end_date,
  allDay: !event.start_time,
  url: `/events/${event.id}`,
  backgroundColor: event.featured ? '#fbbf24' : '#3b82f6',
  borderColor: event.featured ? '#f59e0b' : '#2563eb',
  textColor: '#ffffff',
  extendedProps: {
    description: event.description,
    cost: event.cost,
    registration: event.registration,
    location_id: event.location_id,
    organization_id: event.organization_id,
  }
}));
---

<div class={`calendar-container ${className}`} style={`height: ${height}`}>
  <div id="calendar"></div>
</div>

<script>
  import { Calendar } from '@fullcalendar/core';
  import dayGridPlugin from '@fullcalendar/daygrid';
  import timeGridPlugin from '@fullcalendar/timegrid';
  import interactionPlugin from '@fullcalendar/interaction';
  import listPlugin from '@fullcalendar/list';

  // Get events data from the server
  const events = JSON.parse(
    document.querySelector('[data-events]')?.getAttribute('data-events') || '[]'
  );
  
  // Initialize FullCalendar
  const calendarEl = document.getElementById('calendar');
  
  if (calendarEl) {
    const calendar = new Calendar(calendarEl, {
      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin],
      initialView: 'dayGridMonth',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',
      },
      events: events,
      eventClick: function (info) {
        if (info.event.url) {
          window.location.href = info.event.url;
          return false;
        }
      },
      eventDidMount: function (info) {
        // Add tooltip with event details
        const event = info.event;
        const tooltip = document.createElement('div');
        tooltip.className = 'event-tooltip';
        tooltip.innerHTML = `
          <div class="font-semibold">${event.title}</div>
          ${event.extendedProps.description ? `<div class="text-sm mt-1">${event.extendedProps.description}</div>` : ''}
          ${event.extendedProps.cost ? `<div class="text-sm mt-1">Cost: ${event.extendedProps.cost}</div>` : ''}
          ${event.extendedProps.registration ? '<div class="text-sm mt-1 text-blue-600">Registration Required</div>' : ''}
        `;
        
        info.el.setAttribute('title', tooltip.innerHTML);
      },
      dayMaxEvents: true,
      height: 'auto',
      aspectRatio: 1.35,
      eventTimeFormat: {
        hour: 'numeric',
        minute: '2-digit',
        meridiem: 'short',
      },
      buttonText: {
        today: 'Today',
        month: 'Month',
        week: 'Week',
        day: 'Day',
        list: 'List',
      },
      // Custom styling for events
      eventClassNames: function (arg) {
        const classes = ['cursor-pointer'];
        if (arg.event.extendedProps.registration) {
          classes.push('registration-required');
        }
        if (arg.event.backgroundColor === '#fbbf24') {
          classes.push('featured-event');
        }
        return classes;
      },
    });
    
    calendar.render();
  }
</script>

<!-- Hidden data element to pass events to client-side script -->
<div data-events={JSON.stringify(calendarEvents)} style="display: none;"></div>

<style>
  .calendar-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    overflow: hidden;
  }
  
  /* FullCalendar custom styles */
  :global(.fc) {
    font-family: inherit;
  }
  
  :global(.fc-toolbar-title) {
    font-size: 1.25rem;
    font-weight: 600;
  }
  
  :global(.fc-button-primary) {
    background-color: #3b82f6;
    border-color: #3b82f6;
  }
  
  :global(.fc-button-primary:hover) {
    background-color: #2563eb;
    border-color: #2563eb;
  }
  
  :global(.fc-button-primary:focus) {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5);
  }
  
  :global(.fc-event) {
    border-radius: 4px;
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  :global(.fc-event:hover) {
    opacity: 0.9;
  }
  
  :global(.registration-required) {
    border-style: dashed;
  }
  
  :global(.featured-event) {
    font-weight: 600;
  }
  
  /* Tooltip styles */
  .event-tooltip {
    max-width: 300px;
    padding: 8px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border-radius: 4px;
    font-size: 0.875rem;
    line-height: 1.4;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    :global(.fc-toolbar) {
      flex-direction: column;
      gap: 1rem;
    }
    
    :global(.fc-toolbar-chunk) {
      display: flex;
      justify-content: center;
    }
  }
</style> 