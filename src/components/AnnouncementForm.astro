---
const {
  announcement = {},
  organizations = [],
  action = '/api/announcements/submit',
  method = 'POST',
  className = '',
} = Astro.props;

const getFieldValue = (field: string, defaultValue: string = ''): string => {
  return announcement[field] || defaultValue;
};
---
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('announcement-form');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(form as HTMLFormElement);
        const data = Object.fromEntries(formData.entries());
        try {
          // Basic validation
          if (!data.title || !data.message) {
            alert('Title and message are required.');
            return;
          }
          const response = await fetch((form as HTMLFormElement).action, {
            method: (form as HTMLFormElement).method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
          });
          if (response.ok) {
            // Redirect to thank you page with announcement type
            window.location.href = '/submit/thank-you?type=announcement';
          } else {
            const error = await response.json();
            alert(`Error: ${error.error || 'Failed to submit announcement'}`);
          }
        } catch (error) {
          alert('An unexpected error occurred.');
        }
      });
    }

    // Handle hybrid organization field
    function setupOrganizationField() {
      const select = document.getElementById('organization_select') as HTMLSelectElement;
      const customInput = document.getElementById('organization_custom') as HTMLInputElement;
      const hiddenInput = document.getElementById('organization_id') as HTMLInputElement;
      const hiddenAddedInput = document.getElementById('organization_added') as HTMLInputElement;

      if (!select || !customInput || !hiddenInput || !hiddenAddedInput) return;

      // Show/hide custom input based on select value
      function updateVisibility() {
        const isCustom = select.value === 'custom';
        customInput.style.display = isCustom ? 'block' : 'none';
        customInput.required = isCustom;
        
        if (isCustom) {
          hiddenInput.value = '';
          hiddenAddedInput.value = customInput.value;
        } else {
          hiddenAddedInput.value = '';
          hiddenInput.value = select.value;
        }
      }

      select.addEventListener('change', updateVisibility);
      customInput.addEventListener('input', () => {
        if (select.value === 'custom') {
          hiddenAddedInput.value = customInput.value;
        }
      });

      // Initial setup
      updateVisibility();
    }

    // Setup organization field
    setupOrganizationField();
  });
</script>
<form action={action} method={method} class={`space-y-6 ${className}`} id="announcement-form">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="md:col-span-2">
      <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Announcement Title *</label>
      <input type="text" id="title" name="title" value={getFieldValue('title')} required maxlength="200" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Enter announcement title" />
    </div>
    <div class="md:col-span-2">
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">Message *</label>
      <textarea id="message" name="message" rows="4" required class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Announcement details...">{getFieldValue('message')}</textarea>
    </div>
    <div>
      <label for="link" class="block text-sm font-medium text-gray-700 mb-1">Link</label>
      <input type="url" id="link" name="link" value={getFieldValue('link')} class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="https://example.com" />
    </div>
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Contact Email</label>
      <input type="email" id="email" name="email" value={getFieldValue('email')} class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="contact@example.com" />
      <p class="text-sm text-gray-500 mt-1">
        For confirming details if necessary. This email will not be published.
      </p>
    </div>
    <div>
      <label for="organization_select" class="block text-sm font-medium text-gray-700 mb-1">
        Organization (optional)
      </label>
      <select
        id="organization_select"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="">Select an organization</option>
        {
          organizations.map((org: { id: string; name: string }) => (
            <option value={org.id}>
              {org.name}
            </option>
          ))
        }
        <option value="custom">+ Add new organization</option>
      </select>
      <input
        type="text"
        id="organization_custom"
        placeholder="Enter organization name"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 mt-2 hidden"
        style="display: none;"
      />
      <input type="hidden" id="organization_id" name="organization_id" />
      <input type="hidden" id="organization_added" name="organization_added" />
    </div>
    <div>
      <label for="author" class="block text-sm font-medium text-gray-700 mb-1">Author</label>
      <input type="text" id="author" name="author" value={getFieldValue('author')} class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Your name (optional)" />
    </div>
    <div class="md:col-span-2">
      <label for="comments" class="block text-sm font-medium text-gray-700 mb-1">
        Additional Comments (optional)
      </label>
      <textarea
        id="comments"
        name="comments"
        rows="3"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="Any additional information for the moderators..."
      >{getFieldValue('comments')}</textarea>
      <p class="text-sm text-gray-500 mt-1">
        These comments will not be published and are only for moderator review.
      </p>
    </div>
    <div>
      <label for="show_at" class="block text-sm font-medium text-gray-700 mb-1">Show At</label>
      <input type="datetime-local" id="show_at" name="show_at" value={getFieldValue('show_at')} class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
      <p class="text-sm text-gray-500 mt-1">
        Defaults to immediately after being approved.
      </p>
    </div>
    <div>
      <label for="expires_at" class="block text-sm font-medium text-gray-700 mb-1">Expires At</label>
      <input type="datetime-local" id="expires_at" name="expires_at" value={getFieldValue('expires_at')} class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
      <p class="text-sm text-gray-500 mt-1">
        Defaults to two weeks after the show date.
      </p>
    </div>

    <!-- Honeypot field to catch spam bots -->
    <div class="hidden" style="display: none;">
      <label for="website_url" class="sr-only">Website URL</label>
      <input
        type="text"
        id="website_url"
        name="website_url"
        tabindex="-1"
        autocomplete="off"
        aria-hidden="true"
        style="position: absolute; left: -9999px; width: 1px; height: 1px; opacity: 0;"
      />
      <!-- Timestamp for rate limiting -->
      <input
        type="hidden"
        name="submission_time"
        value={new Date().toISOString()}
      />
    </div>
  </div>
  <div class="flex justify-end">
    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">Submit Announcement</button>
  </div>
</form> 