---
const {
  event = {},
  locations = [],
  organizations = [],
  tags = [],
  action = '/api/events/submit',
  method = 'POST',
  className = '',
} = Astro.props;

// Get form field value with fallback
const getFieldValue = (field: string, defaultValue: string = ''): string => {
  return event[field] || defaultValue;
};
---

<script>
  // Client-side validation using Zod
  import { eventFormSchema } from '../lib/validation';

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('event-form');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(form as HTMLFormElement);
        const data = Object.fromEntries(formData.entries());

        try {
          // Validate form data
          const validatedData = eventFormSchema.parse(data);
          // Submit form
          const response = await fetch((form as HTMLFormElement).action, {
            method: (form as HTMLFormElement).method,
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(validatedData),
          });

          if (response.ok) {
            // Redirect to thank you page
            window.location.href = '/submit/thank-you';
          } else {
            // Show error message
            const error = await response.json();
            alert(`Error: ${error.message || 'Failed to submit event'}`);
          }
        } catch (error) {
          // Show validation error
          if (error && typeof error === 'object' && 'errors' in error) {
            const errorMessage = (error.errors as Array<{message: string}>).map(err => err.message).join('\n');
            alert(`Validation errors:\n${errorMessage}`);
          } else {
            alert('An unexpected error occurred');
          }
        }
      });
    }

    // Handle hybrid input fields (select + custom input)
    function setupHybridField(fieldName: string) {
      const select = document.getElementById(`${fieldName}_select`) as HTMLSelectElement;
      const customInput = document.getElementById(`${fieldName}_custom`) as HTMLInputElement;
      const hiddenInput = document.getElementById(`${fieldName}_id`) as HTMLInputElement;
      const hiddenAddedInput = document.getElementById(`${fieldName}_added`) as HTMLInputElement;

      if (!select || !customInput || !hiddenInput || !hiddenAddedInput) return;

      // Show/hide custom input based on select value
      function updateVisibility() {
        const isCustom = select.value === 'custom';
        customInput.style.display = isCustom ? 'block' : 'none';
        customInput.required = isCustom;
        
        if (isCustom) {
          hiddenInput.value = '';
          hiddenAddedInput.value = customInput.value;
        } else {
          hiddenAddedInput.value = '';
          hiddenInput.value = select.value;
        }
      }

      select.addEventListener('change', updateVisibility);
      customInput.addEventListener('input', () => {
        if (select.value === 'custom') {
          hiddenAddedInput.value = customInput.value;
        }
      });

      // Initial setup
      updateVisibility();
    }

    // Setup all hybrid fields
    setupHybridField('location');
    setupHybridField('organization');
  });
</script>

<form action={action} method={method} class={`space-y-6 ${className}`} id="event-form">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Title -->
    <div class="md:col-span-2">
      <label for="title" class="block text-sm font-medium text-gray-700 mb-1">
        Event Title *
      </label>
      <input
        type="text"
        id="title"
        name="title"
        value={getFieldValue('title')}
        required
        maxlength="200"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="Enter event title"
      />
    </div>

    <!-- Description -->
    <div class="md:col-span-2">
      <label for="description" class="block text-sm font-medium text-gray-700 mb-1">
        Description
      </label>
      <textarea
        id="description"
        name="description"
        rows="4"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="Describe your event...">{getFieldValue('description')}</textarea
      >
    </div>

    <!-- Start Date -->
    <div>
      <label for="start_date" class="block text-sm font-medium text-gray-700 mb-1">
        Start Date *
      </label>
      <input
        type="date"
        id="start_date"
        name="start_date"
        value={getFieldValue('start_date')}
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      />
    </div>

    <!-- Start Time -->
    <div>
      <label for="start_time" class="block text-sm font-medium text-gray-700 mb-1">
        Start Time
      </label>
      <input
        type="time"
        id="start_time"
        name="start_time"
        value={getFieldValue('start_time')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      />
    </div>

    <!-- End Date -->
    <div>
      <label for="end_date" class="block text-sm font-medium text-gray-700 mb-1"> End Date </label>
      <input
        type="date"
        id="end_date"
        name="end_date"
        value={getFieldValue('end_date')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      />
    </div>

    <!-- End Time -->
    <div>
      <label for="end_time" class="block text-sm font-medium text-gray-700 mb-1"> End Time </label>
      <input
        type="time"
        id="end_time"
        name="end_time"
        value={getFieldValue('end_time')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      />
    </div>

    <!-- Cost -->
    <div>
      <label for="cost" class="block text-sm font-medium text-gray-700 mb-1"> Cost </label>
      <input
        type="text"
        id="cost"
        name="cost"
        value={getFieldValue('cost')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="e.g., Free, $10, Donation"
      />
    </div>

    <!-- Website -->
    <div>
      <label for="website" class="block text-sm font-medium text-gray-700 mb-1"> Website </label>
      <input
        type="url"
        id="website"
        name="website"
        value={getFieldValue('website')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="https://example.com"
      />
    </div>

    <!-- Location -->
    <div>
      <label for="location_select" class="block text-sm font-medium text-gray-700 mb-1">
        Location (optional)
      </label>
      <select
        id="location_select"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="">Select a location</option>
        {
          locations.map((location: { id: string; name: string }) => (
            <option value={location.id}>
              {location.name}
            </option>
          ))
        }
        <option value="custom">+ Add new location</option>
      </select>
      <input
        type="text"
        id="location_custom"
        placeholder="Enter location name"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 mt-2 hidden"
        style="display: none;"
      />
      <input type="hidden" id="location_id" name="location_id" />
      <input type="hidden" id="location_added" name="location_added" />
    </div>

    <!-- Organization -->
    <div>
      <label for="organization_select" class="block text-sm font-medium text-gray-700 mb-1">
        Organization (optional)
      </label>
      <select
        id="organization_select"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="">Select an organization</option>
        {
          organizations.map((org: { id: string; name: string }) => (
            <option value={org.id}>
              {org.name}
            </option>
          ))
        }
        <option value="custom">+ Add new organization</option>
      </select>
      <input
        type="text"
        id="organization_custom"
        placeholder="Enter organization name"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 mt-2 hidden"
        style="display: none;"
      />
      <input type="hidden" id="organization_id" name="organization_id" />
      <input type="hidden" id="organization_added" name="organization_added" />
    </div>

    <!-- Primary Tag -->
    <div>
      <label for="primary_tag_select" class="block text-sm font-medium text-gray-700 mb-1">
        Primary Category *
      </label>
      <select
        id="primary_tag_select"
        name="primary_tag_id"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="">Select a category</option>
        {
          tags.map((tag: { id: string; name: string }) => (
            <option value={tag.id}>
              {tag.name}
            </option>
          ))
        }
      </select>
    </div>

    <!-- Secondary Tag -->
    <div>
      <label for="secondary_tag_select" class="block text-sm font-medium text-gray-700 mb-1">
        Secondary Category (optional)
      </label>
      <select
        id="secondary_tag_select"
        name="secondary_tag_id"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="">Select a category (optional)</option>
        {
          tags.map((tag: { id: string; name: string }) => (
            <option value={tag.id}>
              {tag.name}
            </option>
          ))
        }
      </select>
    </div>

    <!-- Registration -->
    <div class="md:col-span-2">
      <div class="flex items-center">
        <input
          type="checkbox"
          id="registration"
          name="registration"
          value="true"
          checked={getFieldValue('registration') === 'true'}
          class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label for="registration" class="ml-2 block text-sm text-gray-700">
          Registration required
        </label>
      </div>
    </div>

    <!-- Registration Link -->
    <div class="md:col-span-2">
      <label for="registration_link" class="block text-sm font-medium text-gray-700 mb-1">
        Registration Link
      </label>
      <input
        type="url"
        id="registration_link"
        name="registration_link"
        value={getFieldValue('registration_link')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="https://example.com/register"
      />
    </div>

    <!-- Email -->
    <div class="md:col-span-2">
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
        Contact Email
      </label>
      <input
        type="email"
        id="email"
        name="email"
        value={getFieldValue('email')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="contact@example.com"
      />
      <p class="text-sm text-gray-500 mt-1">
        For confirming details if necessary. This email will not be published.
      </p>
    </div>

    <!-- External Image URL -->
    <div class="md:col-span-2">
      <label for="external_image_url" class="block text-sm font-medium text-gray-700 mb-1">
        Image URL
      </label>
      <input
        type="url"
        id="external_image_url"
        name="external_image_url"
        value={getFieldValue('external_image_url')}
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="https://example.com/image.jpg"
      />
    </div>

    <!-- Image Alt Text for Accessibility -->
    <div class="md:col-span-2">
      <label for="image_alt_text" class="block text-sm font-medium text-gray-700 mb-1">
        Image Alt Text (for screen readers)
      </label>
      <input
        type="text"
        id="image_alt_text"
        name="image_alt_text"
        value={getFieldValue('image_alt_text')}
        maxlength="255"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="Describe the image for people who cannot see it"
      />
      <p class="text-sm text-gray-500 mt-1">
        This text will be used by screen readers and shown if the image cannot be loaded.
      </p>
    </div>

    <!-- Comments -->
    <div class="md:col-span-2">
      <label for="comments" class="block text-sm font-medium text-gray-700 mb-1">
        Additional Comments (optional)
      </label>
      <textarea
        id="comments"
        name="comments"
        rows="3"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        placeholder="Any additional information for the moderators..."
      >{getFieldValue('comments')}</textarea>
      <p class="text-sm text-gray-500 mt-1">
        These comments will not be published and are only for moderator review.
      </p>
    </div>

    <!-- Honeypot field to catch spam bots -->
    <div class="hidden" style="display: none;">
      <label for="website_url" class="sr-only">Website URL</label>
      <input
        type="text"
        id="website_url"
        name="website_url"
        tabindex="-1"
        autocomplete="off"
        aria-hidden="true"
        style="position: absolute; left: -9999px; width: 1px; height: 1px; opacity: 0;"
      />
      <!-- Timestamp for rate limiting -->
      <input
        type="hidden"
        name="submission_time"
        value={new Date().toISOString()}
      />
    </div>
  </div>

  <!-- Submit Button -->
  <div class="flex justify-end">
    <button
      type="submit"
      class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
    >
      Submit Event
    </button>
  </div>
</form>
