---
import Layout from '../../components/Layout.astro';
import { supabase } from '../../lib/supabase';
import type { Database } from '../../types/database';
import MeetingPatternForm from '../../components/MeetingPatternForm.astro';
import ActivityScheduleForm from '../../components/ActivityScheduleForm.astro';

type KidActivity = Database['public']['Tables']['kid_activities']['Row'];
type PublicKidActivity = Database['public']['Views']['public_kid_activities']['Row'];

// Server-side authentication check
const { data: { session }, error: authError } = await supabase.auth.getSession();

if (authError || !session) {
  return Astro.redirect('/login');
}

// Check if user has admin role
const { data: adminCheck, error: adminError } = await supabase.rpc('is_admin', {
  user_id: session.user.id
});

if (adminError || !adminCheck) {
  return Astro.redirect('/login?error=unauthorized');
}

// Fetch activities only after authentication is confirmed
const { data: activities, error } = await supabase.from('kid_activities').select('*').order('name');

if (error) {
  console.error('Error fetching activities:', error);
}

// Helper function to get parent activity name
function getParentName(activities: KidActivity[], parentId: string | null): string | null {
  if (!parentId) return null;
  const parent = activities?.find(a => a.id === parentId);
  return parent?.name || null;
}

// Group activities by hierarchy type
const programs = activities?.filter(a => a.activity_hierarchy_type === 'PROGRAM') || [];
const sessions = activities?.filter(a => a.activity_hierarchy_type === 'SESSION') || [];
const classTypes = activities?.filter(a => a.activity_hierarchy_type === 'CLASS_TYPE') || [];
const classInstances = activities?.filter(a => a.activity_hierarchy_type === 'CLASS_INSTANCE') || [];

// Build hierarchy tree
const buildHierarchy = (activities: KidActivity[]) => {
  const activityMap = new Map();
  const roots: any[] = [];

  // Create map of all activities
  activities?.forEach(activity => {
    activityMap.set(activity.id, {
      ...activity,
      children: []
    });
  });

  // Build parent-child relationships
  activities?.forEach(activity => {
    if (activity.parent_activity_id) {
      const parent = activityMap.get(activity.parent_activity_id);
      if (parent) {
        parent.children.push(activityMap.get(activity.id));
      }
    } else {
      roots.push(activityMap.get(activity.id));
    }
  });

  return roots;
};

const hierarchyTree = buildHierarchy(activities || []);
---

<Layout title="Admin - Kid Activities">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Kid Activities Admin</h1>

    <!-- Hierarchy Explanation -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4 text-blue-800">Activity Hierarchy Guide</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h3 class="font-semibold text-blue-700 mb-2">Hierarchy Structure:</h3>
          <ul class="text-sm text-blue-600 space-y-1">
            <li><strong>PROGRAM:</strong> Main organization (e.g., "Apple Capital Gymnastics")</li>
            <li><strong>SESSION:</strong> Optional time period (e.g., "2025-26 School Year")</li>
            <li><strong>CLASS_TYPE:</strong> Specific class (e.g., "Kindergarten Tap Dance")</li>
            <li><strong>SCHEDULE:</strong> Time slot with capacity (e.g., "Monday 3-4pm")</li>
          </ul>
        </div>
        <div>
          <h3 class="font-semibold text-blue-700 mb-2">Calendar Components:</h3>
          <ul class="text-sm text-blue-600 space-y-1">
            <li><strong>Meeting Patterns:</strong> Recurring schedules (e.g., "Every Mon/Wed 3-4pm")</li>
            <li><strong>Activity Schedules:</strong> Specific time slots with capacity limits</li>
            <li><strong>Calendar Exceptions:</strong> Closures/holidays (cascade to all children)</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Dashboard Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold mb-2">Programs</h3>
        <p class="text-3xl font-bold text-blue-600">{programs.length}</p>
        <p class="text-sm text-gray-600">Main programs</p>
      </div>
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold mb-2">Sessions</h3>
        <p class="text-3xl font-bold text-green-600">{sessions.length}</p>
        <p class="text-sm text-gray-600">Seasonal sessions</p>
      </div>
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold mb-2">Class Types</h3>
        <p class="text-3xl font-bold text-purple-600">{classTypes.length}</p>
        <p class="text-sm text-gray-600">Class types</p>
      </div>
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-lg font-semibold mb-2">Class Instances</h3>
        <p class="text-3xl font-bold text-orange-600" data-count="class-instances">{classInstances.length}</p>
        <p class="text-sm text-gray-600">Class instances</p>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-xl font-semibold mb-4">Quick Actions</h2>
      <div class="flex flex-wrap gap-4">
        <button 
          onclick="showModal('activityModal')"
          class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Create New Program
        </button>
        <button 
          onclick="bulkMigrateCalendarData()"
          class="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700"
        >
          Bulk Migrate Calendar Data
        </button>
        <button 
          onclick="bulkCreateSessions()"
          class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
        >
          Bulk Create Sessions
        </button>
        <button 
          onclick="exportCalendarData()"
          class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
        >
          Export Calendar Data
        </button>
        <button 
          onclick="bulkDuplicatePrograms()"
          class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
        >
          Bulk Duplicate Programs
        </button>
      </div>
    </div>

    <!-- Activity Hierarchy -->
    <div class="bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-4">Activity Hierarchy</h2>
      
      <!-- Programs -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold mb-3 text-blue-600">Programs</h3>
        <div class="space-y-2">
          {programs.map((program) => {
            const programSessions = activities?.filter(a => a.parent_activity_id === program.id && a.activity_hierarchy_type === 'SESSION') || [];
            const programClassTypes = activities?.filter(a => a.parent_activity_id === program.id && a.activity_hierarchy_type === 'CLASS_TYPE') || [];
            
            return (
              <div class="border border-gray-200 rounded-lg p-4">
                <div class="flex justify-between items-start">
                  <div class="flex-1">
                    <h4 class="font-semibold">{program.name}</h4>
                    <p class="text-sm text-gray-600">{program.description || 'No description'}</p>
                    <p class="text-xs text-gray-500">Type: {program.activity_hierarchy_type || 'Not set'}</p>
                    <div id={`effective-location-${program.id}`} class="text-xs text-blue-600 mt-1">
                      üìç Loading location...
                    </div>
                    
                    {/* Hierarchy Summary */}
                    <div class="mt-3 text-sm text-gray-500">
                      <span class="inline-block bg-green-100 text-green-800 px-2 py-1 rounded mr-2">
                        {programSessions.length} Session{programSessions.length !== 1 ? 's' : ''}
                        {programSessions.length > 0 && (
                          <button 
                            onclick={`scrollToSession('${programSessions[0].id}')`}
                            class="ml-1 text-green-700 hover:text-green-900 font-medium"
                            title="Jump to first session"
                          >
                            ‚Üí
                          </button>
                        )}
                      </span>
                      <span class="inline-block bg-purple-100 text-purple-800 px-2 py-1 rounded">
                        {programClassTypes.length} Class Type{programClassTypes.length !== 1 ? 's' : ''}
                        {programClassTypes.length > 0 && (
                          <button 
                            onclick={`scrollToClassType('${programClassTypes[0].id}')`}
                            class="ml-1 text-purple-700 hover:text-purple-900 font-medium"
                            title="Jump to first class type"
                          >
                            ‚Üí
                          </button>
                        )}
                      </span>
                    </div>
                    
                    {/* Collapsible Details */}
                    <details class="mt-3">
                      <summary class="cursor-pointer text-blue-600 hover:text-blue-800 font-medium">
                        View Details
                      </summary>
                      <div class="mt-3 pl-4 border-l-2 border-gray-200">
                        {programSessions.length > 0 && (
                          <div class="mb-3">
                            <h5 class="font-medium text-gray-700 mb-2">Sessions:</h5>
                            <ul class="space-y-1">
                              {programSessions.map((session) => (
                                <li class="text-sm text-gray-600">
                                  ‚Ä¢ <button 
                                      onclick={`scrollToSession('${session.id}')`}
                                      class="text-blue-600 hover:text-blue-800 font-medium hover:underline"
                                    >
                                      {session.name}
                                    </button>
                                    {session.start_datetime && session.end_datetime && (
                                      <span class="text-gray-400 ml-2">
                                        ({new Date(session.start_datetime).toLocaleDateString()} - {new Date(session.end_datetime).toLocaleDateString()})
                                      </span>
                                    )}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                        
                        {programClassTypes.length > 0 && (
                          <div>
                            <h5 class="font-medium text-gray-700 mb-2">Class Types:</h5>
                            <ul class="space-y-1">
                              {programClassTypes.map((classType) => (
                                <li class="text-sm text-gray-600">
                                  ‚Ä¢ <button 
                                      onclick={`scrollToClassType('${classType.id}')`}
                                      class="text-blue-600 hover:text-blue-800 font-medium hover:underline"
                                    >
                                      {classType.name}
                                    </button>
                                    {classType.min_age && classType.max_age && (
                                      <span class="text-gray-400 ml-2">
                                        (Ages {classType.min_age}-{classType.max_age})
                                      </span>
                                    )}
                                    {classType.cost && (
                                      <span class="text-gray-400 ml-2">
                                        - {classType.cost}
                                      </span>
                                    )}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                        
                        {programSessions.length === 0 && programClassTypes.length === 0 && (
                          <p class="text-sm text-gray-400 italic">No sessions or class types yet</p>
                        )}
                      </div>
                    </details>
                  </div>
                  
                  <div class="flex gap-2">
                    <button 
                      onclick={`createChildActivity('${program.id}', 'SESSION')`}
                      class="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700"
                    >
                      Add Session
                    </button>
                    <button 
                      onclick={`createChildActivity('${program.id}', 'CLASS_TYPE')`}
                      class="bg-purple-600 text-white px-3 py-1 rounded text-sm hover:bg-purple-700"
                    >
                      Add Class Type
                    </button>
                    <button 
                      onclick={`createChildActivity('${program.id}', 'CLASS_INSTANCE')`}
                      class="bg-orange-600 text-white px-3 py-1 rounded text-sm hover:bg-orange-700"
                    >
                      Add Class Instance
                    </button>
                    <button 
                      onclick={`editActivity('${program.id}')`}
                      class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                    >
                      Edit
                    </button>
                    <button 
                      onclick={`duplicateActivity('${program.id}')`}
                      class="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700"
                    >
                      Duplicate
                    </button>
                    <button 
                      onclick={`deleteActivity('${program.id}')`}
                      class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                    >
                      Delete
                    </button>
                    <button 
                      onclick={`console.log('Meeting Patterns button clicked for program:', '${program.id}'); manageMeetingPatterns('${program.id}')`}
                      class="bg-orange-600 text-white px-3 py-1 rounded text-sm hover:bg-orange-700"
                    >
                      Meeting Patterns
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      <!-- Sessions -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold mb-3 text-green-600">Sessions</h3>
        <div class="space-y-2">
          {sessions.map((session) => {
            const sessionClassTypes = activities?.filter(a => a.parent_activity_id === session.id && a.activity_hierarchy_type === 'CLASS_TYPE') || [];
            
            return (
              <div id={`session-${session.id}`} class="border border-gray-200 rounded-lg p-4">
                <div class="flex justify-between items-start">
                  <div class="flex-1">
                    <h4 class="font-semibold">{session.name}</h4>
                    <p class="text-sm text-gray-600">{session.description || 'No description'}</p>
                    <p class="text-xs text-gray-500">
                      Parent: {getParentName(activities || [], session.parent_activity_id) || 'None'} | 
                      Type: {session.activity_hierarchy_type || 'Not set'}
                    </p>
                    <div id={`effective-location-${session.id}`} class="text-xs text-blue-600 mt-1">
                      üìç Loading location...
                    </div>
                    
                    {/* Session dates */}
                    {session.start_datetime && session.end_datetime && (
                      <p class="text-xs text-gray-500 mt-1">
                        {new Date(session.start_datetime).toLocaleDateString()} - {new Date(session.end_datetime).toLocaleDateString()}
                      </p>
                    )}
                    
                    {/* Hierarchy Summary */}
                    <div class="mt-3 text-sm text-gray-500">
                      <span class="inline-block bg-purple-100 text-purple-800 px-2 py-1 rounded">
                        {sessionClassTypes.length} Class Type{sessionClassTypes.length !== 1 ? 's' : ''}
                        {sessionClassTypes.length > 0 && (
                          <button 
                            onclick={`scrollToClassType('${sessionClassTypes[0].id}')`}
                            class="ml-1 text-purple-700 hover:text-purple-900 font-medium"
                            title="Jump to first class type"
                          >
                            ‚Üí
                          </button>
                        )}
                      </span>
                    </div>
                    
                    {/* Collapsible Details */}
                    <details class="mt-3">
                      <summary class="cursor-pointer text-blue-600 hover:text-blue-800 font-medium">
                        View Class Types
                      </summary>
                      <div class="mt-3 pl-4 border-l-2 border-gray-200">
                        {sessionClassTypes.length > 0 ? (
                          <ul class="space-y-1">
                            {sessionClassTypes.map((classType) => (
                              <li class="text-sm text-gray-600">
                                ‚Ä¢ <button 
                                    onclick={`scrollToClassType('${classType.id}')`}
                                    class="text-blue-600 hover:text-blue-800 font-medium hover:underline"
                                  >
                                    {classType.name}
                                  </button>
                                  {classType.min_age && classType.max_age && (
                                    <span class="text-gray-400 ml-2">
                                      (Ages {classType.min_age}-{classType.max_age})
                                    </span>
                                  )}
                                  {classType.cost && (
                                    <span class="text-gray-400 ml-2">
                                      - {classType.cost}
                                    </span>
                                  )}
                              </li>
                            ))}
                          </ul>
                        ) : (
                          <p class="text-sm text-gray-400 italic">No class types yet</p>
                        )}
                      </div>
                    </details>
                  </div>
                  
                  <div class="flex gap-2">
                    <button 
                      onclick={`createChildActivity('${session.id}', 'CLASS_TYPE')`}
                      class="bg-purple-600 text-white px-3 py-1 rounded text-sm hover:bg-purple-700"
                    >
                      Add Class Type
                    </button>
                    <button 
                      onclick={`createChildActivity('${session.id}', 'CLASS_INSTANCE')`}
                      class="bg-orange-600 text-white px-3 py-1 rounded text-sm hover:bg-orange-700"
                    >
                      Add Class Instance
                    </button>
                    <button 
                      onclick={`editActivity('${session.id}')`}
                      class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                    >
                      Edit
                    </button>
                    <button 
                      onclick={`duplicateActivity('${session.id}')`}
                      class="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700"
                    >
                      Duplicate
                    </button>
                    <button 
                      onclick={`deleteActivity('${session.id}')`}
                      class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                    >
                      Delete
                    </button>
                    <button 
                      onclick={`console.log('Meeting Patterns button clicked for session:', '${session.id}'); manageMeetingPatterns('${session.id}')`}
                      class="bg-orange-600 text-white px-3 py-1 rounded text-sm hover:bg-orange-700"
                    >
                      Meeting Patterns
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      <!-- Class Types -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold mb-3 text-purple-600">Class Types</h3>
        <div class="space-y-2">
          {classTypes.map((classType) => {
            const classTypeInstances = activities?.filter(a => a.parent_activity_id === classType.id && a.activity_hierarchy_type === 'CLASS_INSTANCE') || [];
            
            return (
              <div id={`classType-${classType.id}`} class="border border-gray-200 rounded-lg p-4">
                <div class="flex justify-between items-start">
                  <div class="flex-1">
                    <h4 class="font-semibold">{classType.name}</h4>
                    <p class="text-sm text-gray-600">{classType.description || 'No description'}</p>
                    <p class="text-xs text-gray-500">
                      Parent: {getParentName(activities || [], classType.parent_activity_id) || 'None'} | 
                      Type: {classType.activity_hierarchy_type || 'Not set'}
                    </p>
                    <div id={`effective-location-${classType.id}`} class="text-xs text-blue-600 mt-1">
                      üìç Loading location...
                    </div>
                    
                    {/* Age and cost info */}
                    {(classType.min_age || classType.max_age || classType.cost) && (
                      <p class="text-xs text-gray-500 mt-1">
                        {classType.min_age && classType.max_age && `Ages ${classType.min_age}-${classType.max_age}`}
                        {classType.cost && (classType.min_age || classType.max_age) && ' ‚Ä¢ '}
                        {classType.cost && classType.cost}
                      </p>
                    )}
                    
                    {classType.required_gear && (
                      <p class="text-xs text-blue-600 mt-1">
                        <strong>Gear:</strong> {classType.required_gear}
                        {classType.gear_assistance_available && (
                          <span class="text-green-600"> (Assistance available)</span>
                        )}
                      </p>
                    )}
                    
                    {/* Hierarchy Summary */}
                    <div class="mt-3 text-sm text-gray-500">
                      <span class="inline-block bg-orange-100 text-orange-800 px-2 py-1 rounded">
                        {classTypeInstances.length} Instance{classTypeInstances.length !== 1 ? 's' : ''}
                        {classTypeInstances.length > 0 && (
                          <button 
                            onclick={`scrollToClassInstance('${classTypeInstances[0].id}')`}
                            class="ml-1 text-orange-700 hover:text-orange-900 font-medium"
                            title="Jump to first class instance"
                          >
                            ‚Üí
                          </button>
                        )}
                      </span>
                    </div>
                    
                    {/* Class Instances - Display directly under class type */}
                    {classTypeInstances.length > 0 && (
                      <div class="mt-4 pl-4 border-l-2 border-orange-200">
                        <h5 class="font-medium text-orange-700 mb-2">Class Instances:</h5>
                        <div class="space-y-3">
                          {classTypeInstances.map((classInstance) => (
                            <div class="bg-orange-50 border border-orange-200 rounded-lg p-3">
                              <div class="flex justify-between items-start">
                                                                 <div class="flex-1">
                                   <h6 class="font-semibold text-orange-800">{classInstance.name}</h6>
                                   {classInstance.description && (
                                     <p class="text-xs text-gray-600">{classInstance.description}</p>
                                   )}
                                  {classInstance.waitlist_status && (
                                    <p class="text-xs text-orange-600 mt-1">
                                      <strong>Waitlist:</strong> {classInstance.waitlist_status}
                                    </p>
                                  )}
                                  {classInstance.required_gear && (
                                    <p class="text-xs text-blue-600 mt-1">
                                      <strong>Gear:</strong> {classInstance.required_gear}
                                      {classInstance.gear_assistance_available && (
                                        <span class="text-green-600"> (Assistance available)</span>
                                      )}
                                    </p>
                                  )}
                                  
                                  {/* Schedule Display */}
                                  <div id={`schedule-${classInstance.id}`} class="mt-2 text-xs text-gray-600">
                                    <span class="text-gray-500">üìÖ Loading schedule...</span>
                                  </div>
                                  
                                  {/* Effective Location Display */}
                                  <div id={`effective-location-${classInstance.id}`} class="text-xs text-blue-600 mt-1">
                                    üìç Loading location...
                                  </div>
                                </div>
                                <div class="flex gap-1">
                                  <button 
                                    onclick={`editActivity('${classInstance.id}')`}
                                    class="bg-blue-600 text-white px-2 py-1 rounded text-xs hover:bg-blue-700"
                                  >
                                    Edit
                                  </button>
                                  <button 
                                    onclick={`duplicateActivity('${classInstance.id}')`}
                                    class="bg-indigo-600 text-white px-2 py-1 rounded text-xs hover:bg-indigo-700"
                                    title="Duplicate and edit this class instance"
                                  >
                                    üìã
                                  </button>
                                  <button 
                                    onclick={`deleteActivity('${classInstance.id}')`}
                                    class="bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700"
                                  >
                                    Del
                                  </button>
                                  <button 
                                    onclick={`manageEvents('${classInstance.id}')`}
                                    class="bg-purple-600 text-white px-2 py-1 rounded text-xs hover:bg-purple-700"
                                  >
                                    Events
                                  </button>
                                  <button 
                                    onclick={`exportCalendar('${classInstance.id}')`}
                                    class="bg-green-600 text-white px-2 py-1 rounded text-xs hover:bg-green-700"
                                  >
                                    üìÖ
                                  </button>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div class="flex gap-2">
                    <button 
                      onclick={`createChildActivity('${classType.id}', 'CLASS_INSTANCE')`}
                      class="bg-orange-600 text-white px-3 py-1 rounded text-sm hover:bg-orange-700"
                    >
                      Add Class Instance
                    </button>
                    <button 
                      onclick={`editActivity('${classType.id}')`}
                      class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                    >
                      Edit
                    </button>
                    <button 
                      onclick={`duplicateActivity('${classType.id}')`}
                      class="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700"
                    >
                      Duplicate
                    </button>
                    <button 
                      onclick={`deleteActivity('${classType.id}')`}
                      class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                    >
                      Delete
                    </button>
                    <button 
                      onclick={`manageEvents('${classType.id}')`}
                      class="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700"
                    >
                      Activity Events
                    </button>
                    <button 
                      onclick={`console.log('Meeting Patterns button clicked for classType:', '${classType.id}'); manageMeetingPatterns('${classType.id}')`}
                      class="bg-orange-600 text-white px-3 py-1 rounded text-sm hover:bg-orange-700"
                    >
                      Meeting Patterns
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>



      <!-- Orphaned Activities (activities with no parent but not programs) -->
      {(() => {
        const orphanedActivities = activities?.filter(a => !a.parent_activity_id && a.activity_hierarchy_type !== 'PROGRAM') || [];
        return orphanedActivities.length > 0 ? (
          <div class="mb-6">
            <h3 class="text-lg font-semibold mb-3 text-red-600">‚ö†Ô∏è Orphaned Activities (Need Parent Assignment)</h3>
            <div class="space-y-2">
              {orphanedActivities.map((activity) => (
                <div class="border border-red-200 rounded-lg p-4 bg-red-50">
                  <div class="flex justify-between items-start">
                    <div class="flex-1">
                      <h4 class="font-semibold text-red-800">{activity.name}</h4>
                      <p class="text-sm text-gray-600">{activity.description || 'No description'}</p>
                      <p class="text-xs text-red-600">
                        <strong>Issue:</strong> {activity.activity_hierarchy_type} with no parent | 
                        ID: {activity.id}
                      </p>
                    </div>
                    <div class="flex gap-2">
                      <button 
                        onclick={`editActivity('${activity.id}')`}
                        class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                      >
                        Edit
                      </button>
                      <button 
                        onclick={`duplicateActivity('${activity.id}')`}
                        class="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700"
                      >
                        Duplicate
                      </button>
                      <button 
                        onclick={`deleteActivity('${activity.id}')`}
                        class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : null;
      })()}
    </div>
  </div>

  <!-- Activity Modal -->
  <div id="activityModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl w-11/12 md:w-2/3 lg:w-1/2 max-h-[90vh] overflow-y-auto">
      <h2 id="modalTitle" class="text-2xl font-bold mb-4">Create Activity</h2>
      
      <form id="activityForm" class="space-y-4">
        <input type="hidden" id="activityId" name="id" />
        <input type="hidden" id="parentActivityId" name="parent_activity_id" />
        <input type="hidden" id="activityHierarchyType" name="activity_hierarchy_type" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="activityName" class="block text-sm font-medium text-gray-700 mb-1">Name <span class="text-gray-500">(Optional)</span></label>
            <input type="text" id="activityName" name="name" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Leave empty for auto-generated name" />
          </div>
          
          <div id="activityTypeField">
            <label for="activityType" class="block text-sm font-medium text-gray-700 mb-1">Activity Type</label>
            <select id="activityType" name="activity_type" class="w-full px-3 py-2 border border-gray-300 rounded-md">
              <option value="">Select type</option>
              <option value="sports">Sports</option>
              <option value="arts">Arts</option>
              <option value="music">Music</option>
              <option value="dance">Dance</option>
              <option value="academic">Academic</option>
              <option value="recreation">Recreation</option>
              <option value="other">Other</option>
            </select>
          </div>
        </div>

        <div>
          <label for="activityDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea id="activityDescription" name="description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md"></textarea>
        </div>

        <!-- Standard Activity Fields (hide for SESSION) -->
        <div id="standardActivityFields">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="minAge" class="block text-sm font-medium text-gray-700 mb-1">Min Age</label>
              <input type="number" id="minAge" name="min_age" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
            
            <div>
              <label for="maxAge" class="block text-sm font-medium text-gray-700 mb-1">Max Age</label>
              <input type="number" id="maxAge" name="max_age" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="minGrade" class="block text-sm font-medium text-gray-700 mb-1">Min Grade</label>
              <input type="number" id="minGrade" name="min_grade" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
            
            <div>
              <label for="maxGrade" class="block text-sm font-medium text-gray-700 mb-1">Max Grade</label>
              <input type="number" id="maxGrade" name="max_grade" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="cost" class="block text-sm font-medium text-gray-700 mb-1">Cost</label>
              <input type="text" id="cost" name="cost" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., $150" />
            </div>
            
            <div>
              <label for="commitmentLevel" class="block text-sm font-medium text-gray-700 mb-1">Commitment Level</label>
              <select id="commitmentLevel" name="commitment_level" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                <option value="">Select level</option>
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
              </select>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="website" class="block text-sm font-medium text-gray-700 mb-1">Website</label>
              <input type="url" id="website" name="website" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="https://example.com" />
            </div>
            
            <div>
              <!-- Placeholder for potential future field -->
            </div>
          </div>
        </div>

        <!-- Session Information Section (only show for SESSION hierarchy type) -->
        <div id="sessionInfoSection" class="border-t pt-4 hidden">
          <h3 class="text-lg font-semibold mb-3 text-gray-800">Session Information</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="startDatetime" class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
              <input type="date" id="startDatetime" name="start_datetime" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
            
            <div>
              <label for="endDatetime" class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
              <input type="date" id="endDatetime" name="end_datetime" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label for="registrationOpens" class="block text-sm font-medium text-gray-700 mb-1">Registration Opens</label>
              <input type="date" id="registrationOpens" name="registration_opens" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
            
            <div>
              <label for="registrationCloses" class="block text-sm font-medium text-gray-700 mb-1">Registration Closes</label>
              <input type="date" id="registrationCloses" name="registration_closes" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
          </div>

          <div class="mt-4">
            <label for="registrationInfo" class="block text-sm font-medium text-gray-700 mb-1">Registration Information</label>
            <textarea id="registrationInfo" name="registration_info" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., Early bird pricing available, scholarships available, tryouts required"></textarea>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label for="registrationLink" class="block text-sm font-medium text-gray-700 mb-1">Registration Link</label>
              <input type="url" id="registrationLink" name="registration_link" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="https://..." />
            </div>
            
            <div>
              <label for="registrationRequired" class="flex items-center mt-6">
                <input type="checkbox" id="registrationRequired" name="registration_required" class="mr-2" />
                <span class="text-sm font-medium text-gray-700">Registration Required</span>
              </label>
            </div>
          </div>
        </div>

        <!-- Class Instance Information Section (only show for CLASS_INSTANCE hierarchy type) -->
        <div id="classInstanceInfoSection" class="border-t pt-4 hidden">
          <h3 class="text-lg font-semibold mb-3 text-gray-800">üìÖ Class Instance Schedule</h3>
          
          <!-- Session Selection (only show if no parent session) -->
          <div id="sessionSelectionSection" class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 hidden">
            <h4 class="text-md font-semibold text-blue-800 mb-3">Session Assignment</h4>
            <div>
              <label for="sessionSelector" class="block text-sm font-medium text-gray-700 mb-2">Which session does this class instance belong to? *</label>
              <select id="sessionSelector" name="session_id" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                <option value="">Select a session...</option>
              </select>
              <p class="text-xs text-gray-600 mt-1">This class instance will be associated with the selected session for scheduling and registration purposes.</p>
            </div>
          </div>
          
          <!-- Quick Schedule Setup -->
          <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
            <h4 class="text-md font-semibold text-green-800 mb-3">Quick Schedule Setup</h4>
            
            <!-- Schedule Type Selection -->
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-700 mb-2">What type of schedule? *</label>
              <div class="grid grid-cols-2 gap-3">
                <button type="button" id="recurringBtn" class="p-3 border-2 border-gray-300 rounded-lg text-left hover:border-green-500 focus:border-green-500 focus:outline-none transition-colors" onclick="selectScheduleType('RECURRING')">
                  <div class="font-medium">üîÑ Recurring</div>
                  <div class="text-xs text-gray-600">Weekly practice, regular classes</div>
                </button>
                <button type="button" id="oneOffBtn" class="p-3 border-2 border-gray-300 rounded-lg text-left hover:border-green-500 focus:border-green-500 focus:outline-none transition-colors" onclick="selectScheduleType('ONE_OFF')">
                  <div class="font-medium">üìÖ One-time</div>
                  <div class="text-xs text-gray-600">Games, recitals, special events</div>
                </button>
              </div>
              <input type="hidden" id="scheduleType" name="event_type">
            </div>
            
            <!-- Recurring Schedule Form -->
            <div id="recurringForm" class="hidden space-y-4">
              <div class="grid grid-cols-2 gap-4">
                                     <div>
                       <label for="startTime" class="block text-sm font-medium text-gray-700 mb-1">‚è∞ Start Time *</label>
                       <input type="time" id="startTime" name="start_time" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                     </div>
                     <div>
                       <label for="endTime" class="block text-sm font-medium text-gray-700 mb-1">‚è∞ End Time *</label>
                       <input type="time" id="endTime" name="end_time" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                     </div>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">üìÜ Which days? *</label>
                <div class="grid grid-cols-7 gap-2">
                  <label class="flex flex-col items-center p-2 border border-gray-300 rounded hover:bg-gray-50 cursor-pointer transition-colors">
                    <input type="checkbox" name="weekdays" value="MO" class="mb-1">
                    <span class="text-xs font-medium">Mon</span>
                  </label>
                  <label class="flex flex-col items-center p-2 border border-gray-300 rounded hover:bg-gray-50 cursor-pointer transition-colors">
                    <input type="checkbox" name="weekdays" value="TU" class="mb-1">
                    <span class="text-xs font-medium">Tue</span>
                  </label>
                  <label class="flex flex-col items-center p-2 border border-gray-300 rounded hover:bg-gray-50 cursor-pointer transition-colors">
                    <input type="checkbox" name="weekdays" value="WE" class="mb-1">
                    <span class="text-xs font-medium">Wed</span>
                  </label>
                  <label class="flex flex-col items-center p-2 border border-gray-300 rounded hover:bg-gray-50 cursor-pointer transition-colors">
                    <input type="checkbox" name="weekdays" value="TH" class="mb-1">
                    <span class="text-xs font-medium">Thu</span>
                  </label>
                  <label class="flex flex-col items-center p-2 border border-gray-300 rounded hover:bg-gray-50 cursor-pointer transition-colors">
                    <input type="checkbox" name="weekdays" value="FR" class="mb-1">
                    <span class="text-xs font-medium">Fri</span>
                  </label>
                  <label class="flex flex-col items-center p-2 border border-gray-300 rounded hover:bg-gray-50 cursor-pointer transition-colors">
                    <input type="checkbox" name="weekdays" value="SA" class="mb-1">
                    <span class="text-xs font-medium">Sat</span>
                  </label>
                  <label class="flex flex-col items-center p-2 border border-gray-300 rounded hover:bg-gray-50 cursor-pointer transition-colors">
                    <input type="checkbox" name="weekdays" value="SU" class="mb-1">
                    <span class="text-xs font-medium">Sun</span>
                  </label>
                </div>
              </div>
              
              <div class="grid grid-cols-2 gap-4">
                                     <div>
                       <label for="frequency" class="block text-sm font-medium text-gray-700 mb-1">üîÑ Frequency *</label>
                       <select id="frequency" name="freq" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                         <option value="WEEKLY" selected>Weekly</option>
                         <option value="DAILY">Daily</option>
                         <option value="MONTHLY">Monthly</option>
                       </select>
                     </div>
                     <div>
                       <label for="interval" class="block text-sm font-medium text-gray-700 mb-1">üìÖ Every *</label>
                       <select id="interval" name="interval" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                         <option value="1" selected>1 week</option>
                         <option value="2">2 weeks</option>
                         <option value="3">3 weeks</option>
                         <option value="4">4 weeks</option>
                       </select>
                     </div>
              </div>
            </div>
            
            <!-- One-off Schedule Form -->
            <div id="oneOffForm" class="hidden space-y-4">
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label for="startDatetime" class="block text-sm font-medium text-gray-700 mb-1">üìÖ Start Date & Time *</label>
                  <input type="datetime-local" id="startDatetime" name="start_datetime" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                </div>
                <div>
                  <label for="endDatetime" class="block text-sm font-medium text-gray-700 mb-1">üìÖ End Date & Time *</label>
                  <input type="datetime-local" id="endDatetime" name="end_datetime" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                </div>
              </div>
            </div>
          </div>

          <!-- Current Schedule Display -->
          <div id="currentScheduleDisplay" class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4 hidden">
            <h4 class="text-md font-semibold text-blue-800 mb-3">üìã Current Schedule</h4>
            <div id="scheduleContent" class="text-sm text-blue-700">
              <!-- Schedule content will be populated here -->
            </div>
          </div>

          <!-- Optional Details -->
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
            <h4 class="text-md font-semibold text-gray-800 mb-3">üìù Optional Details</h4>
            
            <div class="space-y-4">
              <div>
                <label for="eventName" class="block text-sm font-medium text-gray-700 mb-1">Event Name (Optional)</label>
                <input type="text" id="eventName" name="event_name" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., Weekly Practice, Spring Recital">
              </div>
              
              <div>
                <label for="eventDescription" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                <textarea id="eventDescription" name="event_description" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Additional details about this event"></textarea>
              </div>
              
              <!-- Until Date (Optional) -->
              <div class="mb-4">
                <label for="until" class="block text-sm font-medium text-gray-700 mb-1">‚è∞ Until Date (Optional)</label>
                <input type="date" id="until" name="until" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Defaults to session end date">
                <div id="sessionEndDateInfo" class="text-xs text-blue-600 mt-1 hidden">
                  <span>Session ends: <span id="sessionEndDateDisplay"></span></span>
                </div>
                <p class="text-xs text-gray-500 mt-1">Leave empty to use session end date</p>
              </div>
              
              <div>
                <label for="waitlistStatus" class="block text-sm font-medium text-gray-700 mb-1">üé´ Waitlist Status</label>
                <select id="waitlistStatus" name="waitlist_status" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                  <option value="">Not at capacity</option>
                  <option value="FULL_WAITLIST_AVAILABLE">Full - Waitlist Available</option>
                  <option value="FULL">Full - No Waitlist</option>
                </select>
              </div>
              
              <div>
                <label class="flex items-center">
                  <input type="checkbox" id="ignoreExceptions" name="ignore_exceptions" class="mr-2">
                  <span class="text-sm">üö´ Ignore Parent Exceptions</span>
                </label>
              </div>
            </div>
          </div>
        </div>

        <!-- Gear Section (only show for non-SESSION hierarchy types) -->
        <div id="gearSection" class="border-t pt-4">
          <h3 class="text-lg font-semibold mb-3 text-gray-800">Gear Information</h3>
          
          <div>
            <label for="requiredGear" class="block text-sm font-medium text-gray-700 mb-1">Required Gear</label>
            <textarea id="requiredGear" name="required_gear" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., Comfortable athletic shoes, water bottle, yoga mat"></textarea>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label for="gearAssistanceAvailable" class="flex items-center">
                <input type="checkbox" id="gearAssistanceAvailable" name="gear_assistance_available" class="mr-2" />
                <span class="text-sm font-medium text-gray-700">Gear Assistance Available</span>
              </label>
            </div>
          </div>

          <div class="mt-4">
            <label for="gearAssistanceDetails" class="block text-sm font-medium text-gray-700 mb-1">Gear Assistance Details</label>
            <textarea id="gearAssistanceDetails" name="gear_assistance_details" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., Equipment can be borrowed from the facility, scholarships available for gear"></textarea>
          </div>
        </div>

        <!-- Location Section -->
        <div class="border-t pt-4">
          <h3 class="text-lg font-semibold mb-3 text-gray-800">Location Information</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="locationId" class="block text-sm font-medium text-gray-700 mb-1">Location</label>
              <select id="locationId" name="location_id" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                <option value="">Select Location</option>
              </select>
              <p class="text-xs text-gray-500 mt-1">
                Leave empty to inherit from parent activity
              </p>
              <div id="inherited-location-display" class="text-xs text-green-600 mt-1 hidden">
                <span class="font-medium">Will inherit:</span> <span id="inherited-location-text"></span>
              </div>
            </div>
            
            <div>
              <label for="locationDetails" class="block text-sm font-medium text-gray-700 mb-1">Location Details</label>
              <input type="text" id="locationDetails" name="location_details" class="w-full px-3 py-2 border border-gray-300 rounded-md" 
                     placeholder="e.g., Room 101, Main Gym, etc.">
              <p class="text-xs text-gray-500 mt-1">
                Additional location information (optional)
              </p>
            </div>
          </div>
        </div>

        <div class="flex gap-4">
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Save Activity</button>
          <button type="button" onclick="closeModal('activityModal')" class="px-4 py-2 bg-gray-200 rounded-md">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Activity Events Modal -->
  <div id="calendarModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl w-11/12 md:w-2/3 lg:w-1/2 max-h-[90vh] overflow-y-auto">
      <h2 class="text-2xl font-bold mb-4">Manage Activity Events</h2>
      <div id="calendarManagementContent"></div>
      <button onclick="closeModal('calendarModal')" class="mt-4 px-4 py-2 bg-gray-200 rounded">Close</button>
    </div>
  </div>

  <!-- Activity Schedules Modal -->
  <div id="schedulesModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl w-11/12 md:w-2/3 lg:w-1/2 max-h-[90vh] overflow-y-auto">
      <h2 class="text-2xl font-bold mb-4">Manage Activity Schedules</h2>
      <div id="schedulesManagementContent"></div>
      <button onclick="closeModal('schedulesModal')" class="mt-4 px-4 py-2 bg-gray-200 rounded">Close</button>
    </div>
  </div>

  <script>
    // Secure client-side script - no sensitive data or authentication logic
    let isAuthenticated = true; // Set by server-side authentication

    // Helper function to make API calls with automatic error handling
    async function makeApiCall(url, options = {}) {
      try {
        const response = await fetch(url, {
          ...options,
          headers: {
            'Content-Type': 'application/json',
            ...options.headers,
          },
          credentials: 'include', // Include cookies for session authentication
        });
        
        if (!response.ok) {
          if (response.status === 401 || response.status === 403) {
            // Redirect to login if authentication fails
            window.location.href = '/login';
            return null;
          }
          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        return response;
      } catch (error) {
        console.error('API call failed:', error);
        throw error;
      }
    }

    // Initialize the page when DOM is loaded
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        // Load locations for the form
        await loadLocations();
        
        // Load effective locations for all activities
        await loadEffectiveLocations();
        
        // Load schedules for class instances
        await loadSchedules();
        
        console.log('[KID-ACTIVITIES DEBUG] Page initialized successfully');
      } catch (error) {
        console.error('Error initializing page:', error);
      }
    });

    // Load locations for the form
    async function loadLocations() {
      try {
        const response = await makeApiCall('/api/admin/locations');
        if (!response) return;
        
        const data = await response.json();
        const locationSelect = document.getElementById('locationId');
        if (locationSelect) {
          locationSelect.innerHTML = '<option value="">Select Location</option>';
          data.locations.forEach(location => {
            const option = document.createElement('option');
            option.value = location.id;
            option.textContent = location.name;
            locationSelect.appendChild(option);
          });
        }
      } catch (error) {
        console.error('Error loading locations:', error);
      }
    }

    // Load effective locations for all activities
    async function loadEffectiveLocations() {
      const locationElements = document.querySelectorAll('[id^="effective-location-"]');
      for (const element of locationElements) {
        const activityId = element.id.replace('effective-location-', '');
        try {
          const response = await makeApiCall(`/api/admin/kid-activities/${activityId}/effective-location`);
          if (!response) continue;
          
          const data = await response.json();
          element.textContent = `üìç ${data.location || 'No location set'}`;
        } catch (error) {
          console.error(`Error loading effective location for ${activityId}:`, error);
          element.textContent = 'üìç Error loading location';
        }
      }
    }

    // Load schedules for class instances
    async function loadSchedules() {
      const scheduleElements = document.querySelectorAll('[id^="schedule-"]');
      for (const element of scheduleElements) {
        const activityId = element.id.replace('schedule-', '');
        try {
          const response = await makeApiCall(`/api/admin/kid-activities/${activityId}/activity-events`);
          if (!response) continue;
          
          const data = await response.json();
          if (data.events && data.events.length > 0) {
            const scheduleText = data.events.map(event => {
              const start = new Date(event.start_datetime).toLocaleString();
              const end = new Date(event.end_datetime).toLocaleString();
              return `${start} - ${end}`;
            }).join(', ');
            element.textContent = `üìÖ ${scheduleText}`;
          } else {
            element.textContent = 'üìÖ No schedule set';
          }
        } catch (error) {
          console.error(`Error loading schedule for ${activityId}:`, error);
          element.textContent = 'üìÖ Error loading schedule';
        }
      }
    }

    // Make functions available globally for form submissions
    window.makeApiCall = makeApiCall;
  </script>
</Layout>