---
export const prerender = false;

import Layout from '../../components/Layout.astro';
import Badge from '../../components/ui/Badge.astro';
import { db } from '../../lib/supabase';
import { getCategoryBadgeVariant } from '../../lib/date-utils';
import type { Database } from '../../types/database';

export async function getStaticPaths() {
  // This function is not used when prerender = false, but we keep it for type safety
  return [];
}

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/events');
}

// Fetch the specific event
const { data: event, error } = await db.events.getById(id);

if (error || !event) {
  return Astro.redirect('/events');
}

// Fetch related events (same organization or location)
const { data: relatedEvents } = await db.events.getRelated(id, event.organization_id, event.location_id);

const related = relatedEvents || [];
---

<Layout title={`${event.title} - Der Town`}>
  <main class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Event Header -->
      <div class="bg-white rounded-lg shadow-lg overflow-hidden mb-8">
        {event.external_image_url && (
          <div class="w-full h-64 bg-cover bg-center" style={`background-image: url('${event.external_image_url}')`}></div>
        )}
        <div class="p-8">
          <h1 class="text-3xl font-bold text-gray-900 mb-4">{event.title}</h1>
          
          <!-- Event Meta -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Date & Time</h3>
              <p class="text-gray-600">
                {new Date(event.start_date).toLocaleDateString()}
                {event.start_time && ` at ${event.start_time}`}
                {event.end_date && event.end_date !== event.start_date && ` - ${new Date(event.end_date).toLocaleDateString()}`}
                {event.end_time && ` until ${event.end_time}`}
              </p>
            </div>
            
            {event.location && (
              <div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Location</h3>
                <p class="text-gray-600">{event.location.name}</p>
                {event.location.address && <p class="text-gray-500 text-sm">{event.location.address}</p>}
              </div>
            )}
            
            {event.organization && (
              <div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Organization</h3>
                <p class="text-gray-600">{event.organization.name}</p>
              </div>
            )}
            
            {event.cost && (
              <div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Cost</h3>
                <p class="text-gray-600">{event.cost}</p>
              </div>
            )}
          </div>
          
          <!-- Tags -->
          {(event.primary_tag || event.secondary_tag) && (
            <div class="mb-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Categories</h3>
              <div class="flex flex-wrap gap-2">
                {event.primary_tag && (
                  <Badge variant={getCategoryBadgeVariant(event.primary_tag.name)} size="md">
                    {event.primary_tag.name}
                  </Badge>
                )}
                {event.secondary_tag && (
                  <Badge variant={getCategoryBadgeVariant(event.secondary_tag.name)} size="md">
                    {event.secondary_tag.name}
                  </Badge>
                )}
              </div>
            </div>
          )}
          
          <!-- Description -->
          {event.description && (
            <div class="mb-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Description</h3>
                             <div class="prose text-gray-600">
                 {event.description.split('\n').map((paragraph, index) => (
                   <p class="mb-4">{paragraph}</p>
                 ))}
               </div>
            </div>
          )}
          
          <!-- Action Buttons -->
          <div class="flex flex-wrap gap-4">
            {event.website && (
              <a href={event.website} target="_blank" rel="noopener noreferrer" 
                 class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                Visit Website
              </a>
            )}
            
            {event.registration_link && (
              <a href={event.registration_link} target="_blank" rel="noopener noreferrer"
                 class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700">
                Register Now
              </a>
            )}
            
            <button onclick="shareEvent()" 
                    class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
              Share Event
            </button>
            
            <button onclick="addToCalendar()"
                    class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
              Add to Calendar
            </button>
          </div>
        </div>
      </div>
      
      <!-- Related Events -->
      {related.length > 0 && (
        <div class="bg-white rounded-lg shadow-lg p-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Related Events</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                         {related.map((relatedEvent: any) => (
               <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                 <h3 class="font-semibold text-gray-900 mb-2">
                   <a href={`/events/${relatedEvent.id}`} class="hover:text-blue-600">
                     {relatedEvent.title}
                   </a>
                 </h3>
                 <p class="text-sm text-gray-600 mb-2">
                   {new Date(relatedEvent.start_date).toLocaleDateString()}
                 </p>
                 {relatedEvent.location && (
                   <p class="text-sm text-gray-500">{relatedEvent.location.name}</p>
                 )}
               </div>
             ))}
          </div>
        </div>
      )}
    </div>
  </main>
</Layout>

<script>
  function shareEvent() {
    const eventData = {
      title: document.querySelector('h1')?.textContent || 'Event',
      text: document.querySelector('.prose')?.textContent || '',
      url: window.location.href
    };
    
    if (navigator.share) {
      navigator.share(eventData);
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href).then(() => {
        alert('Event link copied to clipboard!');
      });
    }
  }
  
  function addToCalendar() {
    const eventData = {
      title: document.querySelector('h1')?.textContent || 'Event',
      start: new Date().toISOString(),
      end: new Date().toISOString()
    };
    
    const calendarUrl = `data:text/calendar;charset=utf8,BEGIN:VCALENDAR
VERSION:2.0
BEGIN:VEVENT
URL:${window.location.href}
DTSTART:${eventData.start}
DTEND:${eventData.end}
SUMMARY:${eventData.title}
END:VEVENT
END:VCALENDAR`;
    
    const link = document.createElement('a');
    link.href = calendarUrl;
    link.download = 'event.ics';
    link.click();
  }
</script>
