---
export const prerender = false;

import Layout from '../../components/Layout.astro';
import Badge from '../../components/ui/Badge.astro';
import ShareButton from '../../components/ui/ShareButton.astro';
import CalendarAddButton from '../../components/ui/CalendarAddButton.astro';
import { db } from '../../lib/supabase';
import { getCategoryBadgeVariant, formatEventDateTime } from '../../lib/event-utils';
import EventListCard from '../../components/EventListCard.astro';

export async function getStaticPaths() {
  // This function is not used when prerender = false, but we keep it for type safety
  return [];
}

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/events');
}

// Fetch the specific event
const { data: event, error } = await db.events.getById(id);

if (error || !event) {
  return Astro.redirect('/events');
}

// Fetch related events (same organization or location)
const { data: relatedEvents } = await db.events.getRelated(id, event.organization_id, event.location_id);

const related = (relatedEvents || []) as Array<{
  id: string;
  title: string;
  start_date: string;
  location?: { name: string };
}>;
---

<Layout title={`${event.title} - Der Town`}>
  <main class="min-h-screen bg-gradient-blues-bold py-4 sm:py-8">
    <div class="w-full max-w-6xl mx-auto px-3 sm:px-4 md:px-6 lg:px-8">
      <!-- Event Header -->
      <div class="bg-white rounded-lg shadow-lg mb-6 sm:mb-8 relative">
        {event.external_image_url && (
          <div class="overflow-hidden rounded-t-lg w-full">
            <div class="event-detail-image-wrapper">
              <img src={event.external_image_url} alt={event.title || 'Event image'} class="event-detail-image" />
            </div>
          </div>
        )}
        <div class="p-4 sm:p-6 md:p-8 pb-16 sm:pb-20 relative">
          <!-- Share Button in top-right -->
          <div class="absolute top-4 sm:top-6 right-4 sm:right-6 flex gap-2 z-20">
            <ShareButton 
              title={event.title || 'Event'}
              url={Astro.url.href}
              tooltipText="Share event with your neighbors"
            />
            <!-- Calendar Add Button -->
            <CalendarAddButton 
              eventId={event.id}
              eventTitle={event.title || 'Event'}
              tooltipText="Add this event to your own calendar"
            />
          </div>
          <h1 class="text-2xl sm:text-3xl font-bold mb-4 pr-20 sm:pr-24">{event.title || 'Event'}</h1>
          
          <!-- Event Meta -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 mt-4 sm:mt-6 h-full">
            <div class="flex flex-col h-full min-h-0">
              <!-- Date/Time -->
              <div class="flex items-center gap-2 text-base sm:text-lg text-gray-700">
                <span class="material-symbols-outlined text-blue-600">calendar_today</span>
                <span class="break-words">{formatEventDateTime(event as any)}</span>
              </div>
              <!-- Location -->
              {event.location?.name && (
                <div class="flex items-start gap-2 text-base sm:text-lg text-gray-700 mt-2">
                  <span class="material-symbols-outlined text-blue-600">location_on</span>
                  <span class="break-words">{event.location.name}</span>
                </div>
              )}
              <!-- Organization -->
              {event.organization && (
                <div class="flex items-start gap-2 text-base sm:text-lg text-gray-700 mt-2">
                  <span class="material-symbols-outlined text-blue-600">diversity_3</span>
                  <span class="break-words">{typeof event.organization === 'object' && event.organization !== null ? event.organization.name : (event.organization ?? '')}</span>
                </div>
              )}
              <!-- Website -->
              {event.website && (
                <a href={event.website} target="_blank" rel="noopener noreferrer" class="flex items-center gap-2 text-base sm:text-lg text-blue-600 hover:underline mt-2">
                  <span class="material-symbols-outlined text-blue-600">link</span>
                  <span class="break-words">Website</span>
                </a>
              )}
              <!-- Registration Required -->
              {event.registration && (
                <div class="flex items-center gap-2 text-base sm:text-lg text-orange-600 mt-2">
                  <span class="material-symbols-outlined text-orange-600">local_activity</span>
                  <span class="break-words">Registration required</span>
                </div>
              )}
              <!-- Cost -->
              {event.cost && (
                <div class="flex items-center gap-2 text-base sm:text-lg text-gray-700 mt-2">
                  <span class="material-symbols-outlined text-green-600">attach_money</span>
                  <span class="break-words">{event.cost as string}</span>
                </div>
              )}
            </div>
            <div class="prose max-w-none text-gray-800 sm:text-base">
              {event.description}
            </div>
          </div>
          
          <!-- Tags -->
          {(event.primary_tag || event.secondary_tag) && (
            <div class="flex flex-wrap gap-2 mt-6 sm:mt-8">
              {event.primary_tag && (
                <Badge variant={getCategoryBadgeVariant(event.primary_tag.name)} size="md">
                  {event.primary_tag.name}
                </Badge>
              )}
              {event.secondary_tag && (
                <Badge variant={getCategoryBadgeVariant(event.secondary_tag.name)} size="md">
                  {event.secondary_tag.name}
                </Badge>
              )}
            </div>
          )}
          
          <!-- Action Buttons - moved to bottom-right -->
          {event.registration_link && (
            <div class="absolute bottom-4 sm:bottom-6 right-4 sm:right-6">
              <a href={event.registration_link} target="_blank" rel="noopener noreferrer"
                 class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 shadow-lg">
                Register Now
              </a>
            </div>
          )}
        </div>
      </div>
      
      <!-- Related Events -->
      {related.length > 0 && (
        <div class="bg-white rounded-lg shadow-lg p-4 sm:p-8">
          <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 sm:mb-6">Related Events</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
            {related.map((relatedEvent) => (
              <EventListCard
                event={relatedEvent}
                tags={{
                  primary: ('primary_tag' in relatedEvent && relatedEvent.primary_tag && typeof relatedEvent.primary_tag === 'object' && 'name' in relatedEvent.primary_tag) ? relatedEvent.primary_tag.name : '',
                  secondary: ('secondary_tag' in relatedEvent && relatedEvent.secondary_tag && typeof relatedEvent.secondary_tag === 'object' && 'name' in relatedEvent.secondary_tag) ? relatedEvent.secondary_tag.name : ''
                }}
              />
            ))}
          </div>
        </div>
      )}
    </div>
  </main>
</Layout>

<script is:inline>
  // All calendar functionality is now handled by the CalendarAddButton component
  
  // Share functionality
  function shareEvent() {
    const button = event.target.closest('button');
    const url = button.getAttribute('data-share-url');
    const title = button.getAttribute('data-share-title');
    
    if (navigator.share) {
      navigator.share({
        title: title || 'Event',
        url: url || window.location.href
      });
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(url || window.location.href).then(() => {
        // Show a brief notification
        const notification = document.createElement('div');
        notification.textContent = 'Link copied to clipboard!';
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: #10b981;
          color: white;
          padding: 12px 16px;
          border-radius: 8px;
          z-index: 1000;
          font-size: 14px;
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 2000);
      });
    }
  }
  
  // Calendar dropdown functionality
  function toggleCalendarDropdown() {
    const dropdown = document.getElementById('calendar-dropdown');
    if (dropdown) {
      dropdown.classList.toggle('hidden');
    }
  }
</script>

<style>
.event-detail-image-wrapper {
  width: 100%;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
}
.event-detail-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
  border-radius: 0.5rem 0.5rem 0 0;
}
@media (min-width: 640px) {
  .event-detail-image-wrapper {
    height: 280px;
  }
}
@media (min-width: 1024px) {
  .event-detail-image-wrapper {
    height: 350px;
  }
}
</style>
